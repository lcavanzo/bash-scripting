#!/bin/bash
# nicenumber -- Given a number, shows it in comma-separated form. Expects DD
#   (decimal point delimieter) and TD (thousand delimieter) to be instantiated.
#   Instantiates nicenum or, if a second arg is specifies, the output is 
#   echoed to stdout

nicenumber()
{
    integer=$(echo $1 | cut -d. -f1)    # Left of the decimal
    decimal=$(echo $1 | cut -d. -f2)    # Right of the decimal

    # Check if the number has more than the integer part
    if [ "$decimal" != "$1" ] ; then
        # There's a fractional part, so let's include it.

        # brace substitution :: he assignment (:=) operator is 
        #   used to assign a value to the variable if it doesn't
        #   already have one. 
        result="${DD:= '.'}$decimal"
        # result = .$decimal
    fi
    thousands=$integer

    while [ $thousands -gt 999 ] ; do
        remainder=$(($thousands % 1000))    # Three least significant digits

        # We need 'remainder' to be three digist. Do we need add zeros?
        while [ ${#remainder} -lt 3 ]; do   # force leading zeroes
            remainder="0$remainder"
        done

        result="${TD:=","}${remainder}${result}"    # Builds right to left
        thousands=$(($thousands / 1000))    # To left of remainder if any 
    done

    nicenum="${thousands}${result}"
    if [ ! -z $2 ] ; then
        echo $nicenum
    fi
}

DD="."  # Decimal point delimiter, to separate whole and fractional values
TD=","  # Thousands delimiter, to separate every three digits

# BEGIN MAIN SCRIPT
# ===================
while getopts "d:t:" opt; do
    case $opt in
        d ) DD="$OPTARG"    ;;
        t ) TD="$OPTARG"    ;;
    esac
done
shift $(($OPTIND - 1))

# Input validation
if [ $# -eq 0 ] ; then
    echo "Usage: $(basename $0) [-d c] [-t c] number"
    echo "  -d specifies the decimal point delimiter"
    echo "  -t specifies the thousands delimiter"
    exit 0
fi

nicenumber $1 1     # Second arg forces nicenumber to 'echo' output

exit 0
