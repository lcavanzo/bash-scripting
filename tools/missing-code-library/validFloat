#!/bin/bash
# validfloat--Tests whether a number is a valid floating-point value.
#   Note that this script cannot accept scientific (1.304e5) notation.

#To test whether an entered value is a valid floating-point number,
#   we need to split the value into two parts: the integer portion
#   and the fractional portion. We test the first part to see whether
#   it's a valid integer, and then we test whether the second part is a
#   valid >=0 integer. So -30.5 evaluates as valid, but -30.-8 doesn't.

#   To include another shell as part of this one, use the "." source
#       notation. Easy enough.
. validInt

validFloat()
{
    fvalue="$1"

    # Check whether the input number has a decimal point.
        ## sed find a period
    if [ ! -z $(echo $fvalue | sed 's/[^.]//g') ] ; then

        # Extract the part before the decimal point.
        decimalPart="$(echo $fvalue | cut -d. -f1)"

        # Extract the digits after the decimal point.
        #   this remove the leading numbers, 123.456 -->> 456
        fractionalPart="${fvalue#*\.}"

        #start by testing the decimal part, which is everything
        #   to the left of the decimal point
        if [ ! -z $decimalPart ] ; then
            # "!" reverses test logic, so the following is 
            #   "if NOT a valid integer"
            if ! validInt "$decimalPart" "" "" ; then
                return 1
            fi
        fi

        # Now let's test the fractional value.

        # To start, you can't have a negative sign after the decimal point
        #   like 33.-21, so let's test for the '-' sing in the decimal.
        ## this remove the all characters except the first one i.e: 456 -> 4
            # -456 -> -
        if [ "{fractionalPart%${fractionalPart#?}}" = "-" ] ;then
            echo "Invalid floating-point number: '-' not allowed 
                    after decimal point." >&2
            return 1
        fi
        if [ "$fractionalPart" != "" ] ; then
            # if the fractional part is NOT a valid intefer...
            if ! validInt "$fractionalPart" "0" "" ; then
                return 1
            fi
        fi

    else
        # If the entire value is just "-", that's not good either
        if [ "$fvalue" = "-" ] ; then
            echo "Invalid floating-point format." >&2
            return 1
        fi

        #Finally, check that remaining digits are actually 
        #   valid as a integers
        if ! validIint "$fvalue" "" "" ; then
            return 1
        fi
    fi

    return 0
}

if validFloat $1 ; then
echo "$1 is a valid floating-point value."
fi
exit 0
